<beans  xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd ">

<!-- 加载配置文件 -->
<!-- <context:property-placeholder location="classpath:db.properties"/> -->
<!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
   <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
      <property name="locations">  
         <list>  
            <!-- 这里支持多种寻址方式：classpath和file -->  
            <value>classpath:db.properties</value>
             
            <value>classpath:diagram/purchasingflow.properties</value> 
             
            <!--生产 推荐使用file的方式引入，这样可以将配置和代码分离 -->  
            <!-- <value>file:/opt/demo/config/demo-mq.properties</value>  
            <value>file:/opt/demo/config/demo-remote.properties</value>  --> 
         </list>  
      </property>  
   </bean>
	 <!-- 阿里 druid 数据库连接池 -->
	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">
		<!-- 数据库基本信息配置 -->
		<property name = "url" value = "${url}" />
		<property name = "username" value = "${username}" />
		<property name = "password" value = "${password}" />
		<property name = "driverClassName" value = "${driverClassName}" />
		<property name = "filters" value = "${filters}" />
		<!-- 最大并发连接数 -->
		<property name = "maxActive" value = "${maxActive}" />
		<!-- 初始化连接数量 -->
		<property name = "initialSize" value = "${initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name = "maxWait" value = "${maxWait}" />
		<!-- 最小空闲连接数 -->
		<property name = "minIdle" value = "${minIdle}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />
		<property name = "validationQuery" value = "${validationQuery}" />
		<property name = "testWhileIdle" value = "${testWhileIdle}" />
		<property name = "testOnBorrow" value = "${testOnBorrow}" />
		<property name = "testOnReturn" value = "${testOnReturn}" />
		<property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
		<!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandoned" value = "${removeAbandoned}" />
		<!-- 1800 秒，也就是 30 分钟 -->
		<property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name = "logAbandoned" value = "${logAbandoned}" />
	</bean >

<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	  <tx:attributes>
	     <!-- 传播行为 -->
	    <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	    <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	    <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	    <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
	    <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
	    <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
	  </tx:attributes>
	</tx:advice>
	
 	<mvc:annotation-driven  />
	
    <aop:aspectj-autoproxy />
	<!-- 切面 -->
	<aop:config proxy-target-class="true">
	  <aop:advisor advice-ref="txAdvice"
	  pointcut="execution(* com.liu.*.service.impl.*.*(..))"/>
	</aop:config>
	<!--切面-->
     <bean id="controllerLogAspect" class="com.liu.common.aspact.ControllerLogAspect"></bean>
     <bean id="serviceLogAspect" class="com.liu.common.aspact.ServiceLogAspect"></bean>
</beans>